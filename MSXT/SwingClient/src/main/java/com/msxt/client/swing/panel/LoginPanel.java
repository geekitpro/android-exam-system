package com.msxt.client.swing.panel;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;

import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.msxt.client.i18n.ResourceBundleHandler;
import com.msxt.client.model.LoginSuccessResult;
import com.msxt.client.model.transfer.Message2ModelTransfer;
import com.msxt.client.server.ServerProxy;
import com.msxt.client.server.ServerProxy.Result;
import com.msxt.client.server.ServerProxy.STATUS;
import com.msxt.client.swing.utilities.RoundedBorder;

/**
 *
 * @author felix
 */
public class LoginPanel extends JPanel {
	private static final long serialVersionUID = 7937348829738284679L;
	private ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap();
	private Properties history = null;
	private File historyFile = null;
	
	private boolean loginSuccess = false;
	private LoginSuccessResult lsr = null;
	
	private JLabel serverLabel;
	private JTextField serverTF;
	
	private JButton existButtion;
    private JButton loginButton;
    private JLabel nameLabel;
    private JTextField nameTF;
    private JLabel passwordLabel;
    private JPasswordField passwordTF;
    
    private JDialog loginDialog = null;
    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
    	this.setBorder( new RoundedBorder() );
    	this.setPreferredSize( new Dimension( 300, 200 ) ); 
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
	    serverLabel = new javax.swing.JLabel( resourceMap.getString("server") );
        serverTF = new JTextField( getHistoryServer() );
        nameLabel = new JLabel( resourceMap.getString("login_name") );
        passwordLabel = new javax.swing.JLabel( resourceMap.getString( "password" ) );
        nameTF = new JTextField();
        passwordTF = new JPasswordField();
        existButtion = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
     

        existButtion.setText( resourceMap.getString("exit") );
        existButtion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.exit(0);
            }
        });

        loginButton.setText( resourceMap.getString("login") );
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doLogin();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setAutoCreateGaps(true);
	    layout.setAutoCreateContainerGaps(true);
	    
	    ParallelGroup h1 = layout.createParallelGroup();
        ParallelGroup h2 = layout.createParallelGroup();
        
        h1.addComponent( serverLabel ).addComponent( nameLabel ).addComponent( passwordLabel ).addComponent( existButtion, GroupLayout.Alignment.TRAILING );
        h2.addComponent( serverTF ).addComponent( nameTF ).addComponent( passwordTF ).addComponent( loginButton, GroupLayout.Alignment.LEADING );
        
        SequentialGroup h = layout.createSequentialGroup();
        h.addGap(30, 30, 30).addGroup( h1 ).addGroup( h2 ).addGap(30, 30, 30);
        
	    ParallelGroup v1 = layout.createParallelGroup( GroupLayout.Alignment.CENTER );
	    ParallelGroup v2 = layout.createParallelGroup( GroupLayout.Alignment.CENTER );
	    ParallelGroup v3 = layout.createParallelGroup( GroupLayout.Alignment.CENTER );
	    ParallelGroup v4 = layout.createParallelGroup( GroupLayout.Alignment.CENTER );
	    
	    v1.addComponent( serverLabel ).addComponent( serverTF );
	    v2.addComponent( nameLabel ).addComponent( nameTF );
	    v3.addComponent( passwordLabel ).addComponent( passwordTF );
	    v4.addComponent( existButtion ) .addComponent( loginButton );
	    
	    SequentialGroup v = layout.createSequentialGroup();
        v.addGap(20, 20, 20).addGroup( v1 ).addGroup( v2 ).addGroup( v3 ).addGap(20, 20, 20).addGroup( v4 ).addGap(30, 30, 30); 
        
        layout.setHorizontalGroup( h );
        layout.linkSize( SwingConstants.HORIZONTAL, new Component[] { existButtion, loginButton } );
        layout.setVerticalGroup( v );
    }
                                  
    private void doLogin() {
    	String server = serverTF.getText();
    	String name = nameTF.getText();
    	String password = new String(passwordTF.getPassword());
    	
    	if( server.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, resourceMap.getString("login.note.noserver") ); 
    		serverTF.requestFocus();
    		return;
    	}
    	if( name.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, resourceMap.getString("login.note.noname") );
    		nameTF.requestFocus();
    		return;
    	}
    	if( password.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, resourceMap.getString("login.note.nopasswd") );
    		passwordTF.requestFocus();
    		return;
    	}
    	
    	ServerProxy sp = ServerProxy.Factroy.createInstance( server, 8080 ); 
    	Result result = sp.login(name, password);
    	if( result.getStatus() == STATUS.ERROR ) {
    		JOptionPane.showMessageDialog( this, result.getErrorMessage() );
    	} else {
    		saveAsHistory();
    		try{
		    	DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		        ByteArrayInputStream is = new ByteArrayInputStream( result.getSuccessMessage().getBytes() );
		        Document doc = db.parse( is );
		        is.close();
		        Element root = doc.getDocumentElement();
		        String status = root.getElementsByTagName("status").item(0).getTextContent();
		        if( status.equals("failed") ) {
		        	String desc = root.getElementsByTagName("desc").item(0).getTextContent();
		        	desc = ResourceBundleHandler.getString( desc );
		        	JOptionPane.showMessageDialog(this, desc, resourceMap.getString("login.fail"), JOptionPane.ERROR_MESSAGE);
		        } else {
		        	String conversation = root.getElementsByTagName( "conversation" ).item(0).getTextContent();
		        	sp.setConversationId( conversation );
		        	
		        	lsr = Message2ModelTransfer.Factory.getInstance().parseResult( root );
		        	loginSuccess = true;
		        	loginDialog.setVisible( false );
		        }
    		} catch (Exception e) {
    			e.printStackTrace();
    			JOptionPane.showMessageDialog(this, resourceMap.getString("login.invalidmsg") );
			}
    	}
    }
    
    private String getHistoryServer(){
    	if( historyFile==null ) {    	
    		String home = System.getProperty("user.dir");
    		historyFile = new File( home + "/etc/history" );
	    	if( historyFile.exists() ) {
	    		history = new Properties();
	    		try {
	    			FileInputStream fis = new FileInputStream(historyFile); 
	    			history.load( fis );
	    			fis.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
	    	}
    	}
    	String result = "";
    	if( history!=null && history.containsKey( "server_host" ) )
			result = history.getProperty( "server_host" );
    	return result;
    }
    
    private void saveAsHistory(){
    	String serverHost = serverTF.getText();
    	if( history!=null && !getHistoryServer().equals( serverHost ) ) {
    		history.put( "server_host", serverHost );
    		try {
    			FileOutputStream fos = new FileOutputStream(historyFile); 
    			history.store(fos, "");
    			fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
    	}
    }
    
	public boolean isLoginSuccess() {
		return loginSuccess;
	}
	
	public LoginSuccessResult getLoginSuccessResult(){
		return lsr;
	}
	
	public void showDialog( Frame parent ) {
		loginSuccess = false;
		loginDialog = new JDialog( parent, true );
        loginDialog.add( this );
        loginDialog.pack();
        loginDialog.setTitle( resourceMap.getString("login") );
        loginDialog.setLocationRelativeTo(null);
        if( serverTF.getText().length()>0 )
        	nameTF.requestFocus();
        loginDialog.setVisible(true);
        loginDialog.dispose();        
	}
}
