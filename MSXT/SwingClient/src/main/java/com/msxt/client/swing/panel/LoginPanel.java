/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.msxt.client.swing.panel;

import java.io.ByteArrayInputStream;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.msxt.client.model.LoginSuccessResult;
import com.msxt.client.swing.launcher.DesktopLauncher;
import com.msxt.client.swing.server.ServerProxy;
import com.msxt.client.swing.server.ServerProxy.Result;
import com.msxt.client.swing.server.ServerProxy.STATUS;

/**
 *
 * @author felix
 */
public class LoginPanel extends JPanel {
	private static final long serialVersionUID = 7937348829738284679L;
	private JLabel serverLabel;
	private JTextField serverTF;
	
	private JButton existButtion;
    private JButton loginButton;
    private JLabel nameLabel;
    private JTextField nameTF;
    private JLabel passwordLabel;
    private JPasswordField passwordTF;
    
    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
	    serverLabel = new javax.swing.JLabel("服务器:");
        serverTF = new JTextField();
        nameLabel = new JLabel("登录名:");
        passwordLabel = new javax.swing.JLabel("密   码:");
        nameTF = new JTextField();
        passwordTF = new JPasswordField();
        existButtion = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
     

        existButtion.setText("退出");
        existButtion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.exit(0);
            }
        });

        loginButton.setText("登录");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doLogin();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(existButtion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loginButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordTF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel)
                    .addComponent(serverTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(existButtion)
                    .addComponent(loginButton))
                .addContainerGap(98, Short.MAX_VALUE))
        );
    }
                                  
    private void doLogin() {
    	String server = serverTF.getText();
    	String name = nameTF.getText();
    	String password = new String(passwordTF.getPassword());
    	
    	if( server.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, "请输入服务器地址"); 
    		serverTF.requestFocus();
    		return;
    	}
    	if( name.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, "请输入用户名");
    		nameTF.requestFocus();
    		return;
    	}
    	if( password.trim().isEmpty() ) {
    		JOptionPane.showMessageDialog(this, "请输入密码");
    		passwordTF.requestFocus();
    		return;
    	}
    	
    	ServerProxy sp = ServerProxy.Factroy.createInstance( server, 8080 ); 
    	Result result = sp.login(name, password);
    	if( result.getStatus() == STATUS.ERROR ) {
    		JOptionPane.showMessageDialog( this, result.getErrorMessage() );
    	} else {
    		try{
		    	DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		        ByteArrayInputStream is = new ByteArrayInputStream( result.getSuccessMessage().getBytes() );
		        Document doc = db.parse( is );
		        is.close();
		        Element root = doc.getDocumentElement();
		        String status = root.getElementsByTagName("status").item(0).getTextContent();
		        if( status.equals("failed") ) {
		        	String desc = root.getElementsByTagName("desc").item(0).getTextContent();
		        	JOptionPane.showMessageDialog(this, desc, "登录失败", JOptionPane.ERROR_MESSAGE);
		        } else {
		        	String conversation = root.getElementsByTagName( "conversation" ).item(0).getTextContent();
		        	sp.setConversationId( conversation );
		        	LoginSuccessResult lsr = parseResult( root );
		        	DesktopLauncher.createSelectExamFram( lsr );
		        }
    		} catch (Exception e) {
    			JOptionPane.showMessageDialog(this, "错误消息格式");
			}
    	}
    }
    
    private LoginSuccessResult parseResult( Element root ) {
    	LoginSuccessResult lsr = new LoginSuccessResult();
    	String interviewer = root.getElementsByTagName( "interviewer" ).item(0).getTextContent();
    	String jobtitle = root.getElementsByTagName( "jobtitle" ).item(0).getTextContent();
    	lsr.setInterviewer( interviewer );
    	lsr.setJobtitle( jobtitle );
    	
    	Element examinations = (Element)root.getElementsByTagName( "examinations" ).item(0);
    	NodeList examChildren = examinations.getChildNodes();
    	for( int i=0; i<examChildren.getLength(); i++ ) {
    		Element exam = (Element)examChildren.item(i);
    		String id = exam.getElementsByTagName( "id" ).item(0).getTextContent();
    		String name = exam.getElementsByTagName( "name" ).item(0).getTextContent();
    		String desc = exam.getElementsByTagName( "desc" ).item(0).getChildNodes().item(0).getTextContent();
    		
    		LoginSuccessResult.Examination le = new LoginSuccessResult.Examination();
    		le.setId( id );
    		le.setName( name );
    		le.setDesc( desc );
    		lsr.getExaminations().add( le );
    	}
    	return lsr;
    }
}
